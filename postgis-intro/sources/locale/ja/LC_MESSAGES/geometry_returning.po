# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to
# PostGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# Regina Obe <regina@arrival3d.com>, 2022.
# Teramoto Ikuhiro <yellow@affrc.go.jp>, 2023, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2024-05-30 02:45+0000\n"
"Last-Translator: Teramoto Ikuhiro <yellow@affrc.go.jp>\n"
"Language-Team: Japanese <https://weblate.osgeo.org/projects/postgis-workshop/"
"geometry_returning/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4.3\n"
"Generated-By: Babel 2.9.1\n"

#: ../../en/geometry_returning.rst:4
msgid "Geometry Constructing Functions"
msgstr "ジオメトリ構築関数"

#: ../../en/geometry_returning.rst:6
msgid ""
"All the functions we have seen so far work with geometries \"as they are\" "
"and returns"
msgstr "これまでに見た関数は、全てジオメトリを「そのまま」動作させ、次のように返して"
"いました"

#: ../../en/geometry_returning.rst:8
msgid ""
"analyses of the objects (:command:`ST_Length(geometry)`, :command:"
"`ST_Area(geometry)`),"
msgstr ""
"オブジェクトの分析 (:command:`ST_Length(geometry)`, "
":command:`ST_Area(geometry)`) や、"

#: ../../en/geometry_returning.rst:9
msgid ""
"serializations of the objects (:command:`ST_AsText(geometry)`, :command:"
"`ST_AsGML(geometry)`),"
msgstr ""
"オブジェクトの直列化 (:command:`ST_AsText(geometry)`, "
":command:`ST_AsGML(geometry)`) や、"

#: ../../en/geometry_returning.rst:10
msgid "parts of the object (:command:`ST_RingN(geometry,n)`) or"
msgstr "オブジェクトの一部 (:command:`ST_RingN(geometry,n)`) または"

#: ../../en/geometry_returning.rst:11
msgid ""
"true/false tests (:command:`ST_Contains(geometry,geometry)`, :command:"
"`ST_Intersects(geometry,geometry)`)."
msgstr ""
"TRUE / FALSE のテスト (:command:`ST_Contains(geometry,geometry)`, "
":command:`ST_Intersects(geometry,geometry)`) です。"

#: ../../en/geometry_returning.rst:13
msgid ""
"\"Geometry constructing functions\" take geometries as inputs and output new "
"shapes."
msgstr "「ジオメトリ構築関数」はジオメトリを入力に取り新しい形状を出力にします。"

#: ../../en/geometry_returning.rst:17
msgid "ST_Centroid / ST_PointOnSurface"
msgstr "ST_Centroid / ST_PointOnSurface"

#: ../../en/geometry_returning.rst:19
msgid ""
"A common need when composing a spatial query is to replace a polygon feature "
"with a point representation of the feature. This is useful for spatial joins "
"(as discussed in :ref:`polypolyjoins`) because using :command:"
"`ST_Intersects(geometry,geometry)` on two polygon layers often results in "
"double-counting: a polygon on a boundary will intersect an object on both "
"sides; replacing it with a point forces it to be on one side or the other, "
"not both."
msgstr ""
"ポリゴン地物を地物のポイント表現に入れ替える空間クエリを作成するとき一般に必"
"要となります。これは空間結合 (:ref:`polypolyjoins` で触れます) "
"に使うといいです。二つのポリゴンレイヤでの "
":command:`ST_Intersects(geometry,geometry)` は、ポリゴンが複数オブジェクト境"
"界上にあると、両方とインタセクトしたりして、しばしば数え上げが二重になること"
"があるためです。変換したポイントがどちらか一方について、両方にはつかないよう"
"に強制します。"

#: ../../en/geometry_returning.rst:21
msgid ""
":command:`ST_Centroid(geometry)` returns a point that is approximately on "
"the center of mass of the input argument. This simple calculation is very "
"fast, but sometimes not desirable, because the returned point is not "
"necessarily in the feature itself. If the input feature has a convexity "
"(imagine the letter 'C') the returned centroid might not be in the interior "
"of the feature."
msgstr ""
":command:`ST_Centroid(geometry)` は入力引数の中心におおむね来るポイントを返し"
"ます。この単純計算は非常に速いですが、返されるポイントが地物の中にあるとは限"
"らず、望ましいものではない場合があります。入力地物が凸でない場合 (欧字の 'C' "
"を想像して下さい) には、重心は地物の内部にない場合があります。"

#: ../../en/geometry_returning.rst:22
msgid ""
":command:`ST_PointOnSurface(geometry)` returns a point that is guaranteed to "
"be inside the input argument. This makes it more useful for computing "
"\"proxy points\" for spatial joins."
msgstr ""
":command:`ST_PointOnSurface(geometry)` は入力引数の内側にあることを保証するポ"
"イントを返します。これは、空間結合で「代理ポイント」を計算するのに、もっとベ"
"ンチです。"

#: ../../en/geometry_returning.rst:45
msgid "ST_Buffer"
msgstr "ST_Buffer"

#: ../../en/geometry_returning.rst:47
msgid ""
"The buffering operation is common in GIS workflows, and is also available in "
"PostGIS. :command:`ST_Buffer(geometry,distance)` takes in a buffer distance "
"and geometry type and outputs a polygon with a boundary the buffer distance "
"away from the input geometry."
msgstr ""
"バッファ処理は GIS の作業手順では一般的に行われていて、PostGIS "
"でも使用できます。 :command:`ST_Buffer(geometry,distance)` はバッファ距離とジ"
"オメトリタイプを受け取り、入力ジオメトリからバッファ距離だけ離れた境界を持つ"
"ポリゴンを出力します。"

#: ../../en/geometry_returning.rst:52
msgid ""
"For example, if the US Park Service wanted to enforce a marine traffic zone "
"around Liberty Island, they might build a 500 meter buffer polygon around "
"the island. Liberty Island is a single census block in our "
"``nyc_census_blocks`` table, so we can easily extract and buffer it."
msgstr ""
"たとえば、米国国立公園局は、リバティ島の周りの海上交通ゾーンを設定したいとす"
"ると、島の周囲500mのバッファとなるポリゴンを構築できます。リバティ島は、"
"このワークショップで使用している ``nyc_census_blocks`` "
"テーブル内の単一街区ですので、簡単に抽出してバッファ処理を実行できます。"

#: ../../en/geometry_returning.rst:65
msgid ""
"The :command:`ST_Buffer` function also accepts negative distances and builds "
"inscribed polygons within polygonal inputs. For lines and points you will "
"just get an empty return."
msgstr ""
":command:`ST_Buffer` 関数も、負の距離を受け付け、ポリゴンの入力から内側に入り"
"込んだポリゴンを構築します。ラインとポイントでは、空ポリゴンが返されます。"

#: ../../en/geometry_returning.rst:72
msgid "ST_Intersection"
msgstr "ST_Intersection"

#: ../../en/geometry_returning.rst:74
msgid ""
"Another classic GIS operation -- the \"overlay\" -- creates a new coverage "
"by calculating the intersection of two superimposed polygons. The resultant "
"has the property that any polygon in either of the parents can be built by "
"merging polygons in the resultant."
msgstr ""
"他の伝統的な GIS 処理である「オーバレイ」によって、二つの重なったポリゴンのイ"
"ンタセクションを計算して新しいカバレッジが生成されます。結果には、結果の中に"
"あるポリゴンをマージすることで、いずれかの親の中にある任意のポリゴンを構築で"
"きるという特性があります。"

#: ../../en/geometry_returning.rst:76
msgid ""
"The :command:`ST_Intersection(geometry A, geometry B)` function returns the "
"spatial area (or line, or point) that both arguments have in common. If the "
"arguments are disjoint, the function returns an empty geometry."
msgstr ""
":command:`ST_Intersection(geometry A, geometry B)` 関数は、"
"引数の両方が共有する空間の面 (または線または点) "
"を返します。引数が接続していない場合には、関数は空ジオメトリを返します。"

#: ../../en/geometry_returning.rst:94
msgid "ST_Union"
msgstr "ST_Union"

#: ../../en/geometry_returning.rst:96
msgid ""
"In the previous example we intersected geometries, creating a new geometry "
"that had lines from both the inputs. The :command:`ST_Union` function does "
"the reverse; it takes inputs and removes common lines. There are two forms "
"of the :command:`ST_Union` function:"
msgstr ""
"前の例では、ジオメトリをインタセクトさせて、両方の入力からのラインを持つ新し"
"いジオメトリを生成しました。:command:`ST_Union` "
"関数は反転せず、入力を取り共有ラインを削除します。:command:`ST_Union` "
"には二つの形式があります:"

#: ../../en/geometry_returning.rst:98
msgid ""
":command:`ST_Union(geometry, geometry)`: A two-argument version that takes "
"in two geometries and returns the merged union.  For example, our two-circle "
"example from the previous section looks like this when you replace the "
"intersection with a union."
msgstr ""
":command:`ST_Union(geometry, geometry)`: 2引数版では二つのジオメトリを取り、"
"マージされた結合を返します。たとえば、前の節で出てきた二つの円の例は、インタ"
"セクションを結合に入れ替えたら、これと同じように見えます。"

#: ../../en/geometry_returning.rst:114
msgid ""
":command:`ST_Union([geometry])`: An aggregate version that takes in a set of "
"geometries and returns the merged geometry for the entire group. The "
"aggregate ST_Union can be used with the ``GROUP BY`` SQL statement to create "
"carefully merged subsets of basic geometries. It is very powerful."
msgstr ""
":command:`ST_Union([geometry])`: 集約関数版は、ジオメトリの集合を引数に取り、"
"グループ全体についてマージしたジオメトリを返します。集約関数版の ST_Union "
"は、基本ジオメトリの部分集合を慎重に生成するために、\"GROUP BY\" SQL "
"句を併用できます。非常に強力です。"

#: ../../en/geometry_returning.rst:116
msgid ""
"As an example of :command:`ST_Union` aggregation, consider our "
"``nyc_census_blocks`` table. Census geography is carefully constructed so "
"that larger geographies can be built up from smaller ones. So, we can create "
"a census tracts map by merging the blocks that form each tract (as we do "
"later in :ref:`creatingtractstable`). Or, we can create a county map by "
"merging blocks that fall within each county."
msgstr ""
":command:`ST_Union` 集約関数の例として、``nyc_census_blocks`` テーブルを考え"
"ます。国勢調査のジオグラフィは、小さいジオグラフィから大きいジオグラフィを作"
"成できるよう慎重に構築されています。そのため、"
"国勢調査区を構成する街区をマージして国勢調査区を生成することができます (後の "
":ref:`creatingtractstable` "
"で行います)。また、各郡に属する街区のマージで郡の生成ができます。"

#: ../../en/geometry_returning.rst:118
msgid ""
"To carry out the merge, note that the unique key ``blkid`` actually embeds "
"information about the higher level geographies. Here are the parts of the "
"key for Liberty Island we used earlier:"
msgstr ""
"マージの実行には、一意のキーである ``blkid`` が実際にはより高いレベルのジオグ"
"ラフィに関する情報が埋め込まれていることに注意して下さい。以前に使用したリバ"
"ティ島についてのキーの一部は次の通りです:"

#: ../../en/geometry_returning.rst:131
msgid ""
"So, we can create a county map by merging all geometries that share the same "
"first 5 digits of their ``blkid``. Be patient; this is computationally "
"expensive and can take a minute or two."
msgstr ""
"``blkid`` の先頭5桁が同じジオメトリの全てをマージして郡地図を作ることができま"
"す。我慢して下さい。これは計算コストが高く、1、2分かかりえます。"

#: ../../en/geometry_returning.rst:146
msgid ""
"An area test can confirm that our union operation did not lose any geometry. "
"First, we calculate the area of each individual census block, and sum those "
"areas grouping by census county id."
msgstr ""
"面積テストによって、結合処理でジオメトリが一切失われないことを確認することが"
"できます。まず、個々の街区の面積を計算し、郡IDによるグループ化して、グループ"
"ごとに面積を合計します。"

#: ../../en/geometry_returning.rst:165
msgid ""
"Then we calculate the area of each of our new county polygons from the "
"county table:"
msgstr "郡テーブルから個々の新しい郡ポリゴンの面積を計算します:"

#: ../../en/geometry_returning.rst:183
msgid ""
"The same answer! We have successfully built an NYC county table from our "
"census blocks data."
msgstr "同じ結果になりました! "
"街区データからニューヨーク市の郡テーブルの構築に成功しました。"

#: ../../en/geometry_returning.rst:212
msgid "Function List"
msgstr "関数リスト"

#: ../../en/geometry_returning.rst:214
msgid ""
"`ST_Centroid(geometry) <http://postgis.net/docs/ST_Centroid.html>`_: Returns "
"a point geometry that represents the center of mass of the input geometry."
msgstr ""
"`ST_Centroid(geometry) <http://postgis.net/docs/ja/ST_Centroid.html>`_: "
"入力ジオメトリの重心を表現するポイントジオメトリを返します。"

#: ../../en/geometry_returning.rst:216
msgid ""
"`ST_PointOnSurface(geometry) <http://postgis.net/docs/ST_PointOnSurface."
"html>`_: Returns a point geometry that is guaranteed to be in the interior "
"of the input geometry."
msgstr ""
"`ST_PointOnSurface(geometry) <http://postgis.net/docs/ja/ST_PointOnSurface."
"html>`_: "
"入力ジオメトリの内部にあることが保証されたポイントジオメトリを返します。"

#: ../../en/geometry_returning.rst:218
msgid ""
"`ST_Buffer(geometry, distance) <http://postgis.net/docs/ST_Buffer.html>`_: "
"For geometry: Returns a geometry that represents all points whose distance "
"from this Geometry is less than or equal to distance. Calculations are in "
"the Spatial Reference System of this Geometry. For geography: Uses a planar "
"transform wrapper."
msgstr ""
"`ST_Buffer(geometry, distance) <http://postgis.net/docs/ja/ST_Buffer.html>`_:"
" ジオメトリ版: 指定したジオメトリからの距離が指定した距離以下である点の全てを"
"表現するジオメトリを返します。ジオメトリの計算は、指定したジオメトリの空間参"
"照系で行われます。ジオグラフィ版: 投影座標系に変換する薄いラッパです。"

#: ../../en/geometry_returning.rst:220
msgid ""
"`ST_Intersection(geometry A, geometry B) <http://postgis.net/docs/"
"ST_Intersection.html>`_: Returns a geometry that represents the shared "
"portion of geomA and geomB. The geography implementation does a transform to "
"geometry to do the intersection and then transform back to WGS84."
msgstr ""
"`ST_Intersection(geometry A, geometry B) <http://postgis.net/docs/ja/"
"ST_Intersection.html>`_: geomA と geomB との共有部を表現するジオメトリを返し"
"ます。ジオグラフィ実装では、ジオメトリに変換して、インタセクションを得て、 "
"WGS84 に戻します。"

#: ../../en/geometry_returning.rst:222
msgid ""
"`ST_Union() <http://postgis.net/docs/ST_Union.html>`_: Returns a geometry "
"that represents the point set union of the Geometries."
msgstr ""
"`ST_Union() <http://postgis.net/docs/ja/ST_Union.html>`_: "
"ジオメトリ群の和集合を表現するジオメトリを返します。"

#: ../../en/geometry_returning.rst:224
msgid ""
"`ST_AsText(text) <http://postgis.net/docs/ST_AsText.html>`_: Returns the "
"Well-Known Text (WKT) representation of the geometry/geography without SRID "
"metadata."
msgstr ""
"`ST_AsText(text) <http://postgis.net/docs/ja/ST_AsText.html>`_: "
"SRIDメタデータを持たないジオメトリ/ジオグラフィの Well-Known Text (WKT) "
"表現を返します。"

#: ../../en/geometry_returning.rst:226
msgid ""
"`substring(string [from int] [for int]) <http://www.postgresql.org/docs/"
"current/static/functions-string.html>`_: PostgreSQL string function to "
"extract substring matching SQL regular expression."
msgstr ""
"`substring(string [from int] [for int]) <https://www.postgresql.jp/document/"
"current/html/functions-string.html>`_: SQL "
"正規表現に合致する部分文字列を抽出する PostgreSQL 文字列関数です。"

#: ../../en/geometry_returning.rst:228
msgid ""
"`sum(expression) <http://www.postgresql.org/docs/current/static/functions-"
"aggregate.html#FUNCTIONS-AGGREGATE-TABLE>`_: PostgreSQL aggregate function "
"that returns the sum of records in a set of records."
msgstr ""
"`sum(expression) <https://www.postgresql.jp/document/current/html/functions-"
"aggregate.html#FUNCTIONS-AGGREGATE-TABLE>`_: "
"レコード集合のレコードの合計を返すPostgreSQL 集約関数です。"
