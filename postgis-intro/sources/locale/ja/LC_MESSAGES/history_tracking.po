# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to
# PostGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# Regina Obe <regina@arrival3d.com>, 2022.
# Teramoto Ikuhiro <yellow@affrc.go.jp>, 2023.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2023-07-22 08:08+0000\n"
"Last-Translator: Teramoto Ikuhiro <yellow@affrc.go.jp>\n"
"Language-Team: Japanese <https://weblate.osgeo.org/projects/postgis-workshop/"
"history_tracking/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.16.4\n"
"Generated-By: Babel 2.9.1\n"

#: ../../en/history_tracking.rst:4
msgid "Tracking Edit History using Triggers"
msgstr "トリガを使用した編集履歴の追跡"

#: ../../en/history_tracking.rst:6
msgid ""
"A common requirement for production databases is the ability to track "
"history: how has the data changed between two dates, who made the changes, "
"and where did they occur? Some GIS systems track changes by including change "
"management in the client interface, but that adds a lot of **complexity** to "
"editing tools."
msgstr ""
"本番データベースの一般的な要件に、二つの日付の間でデータがどのくらい変わった"
"か、誰が変更したか、どこで発生したか、といった履歴追跡機能があります。GIS シ"
"ステムの中には、クライアントインタフェースに変更管理機能を持たせることで変更"
"を追跡するものがありますが、編集ツールに多くの**複雑性**が加わります。"

#: ../../en/history_tracking.rst:8
msgid ""
"Using the database and the trigger system, it's possible to add history "
"tracking to any table, while maintaining simple \"direct edit\" access to "
"the primary table."
msgstr ""
"データベースとトリガシステムを使って、どのテーブルにでも履歴追跡の追加は可能"
"です。単純な「直接編集」を維持することで、主要テーブルにアクセスきるようにな"
"ります。"

#: ../../en/history_tracking.rst:10
msgid ""
"History tracking works by keeping a history table that records, for every "
"edit:"
msgstr "編集操作ごとに記録する履歴テーブルを維持することで履歴追跡が働きます:"

#: ../../en/history_tracking.rst:12
msgid "If a record was created, when it was added and by whom."
msgstr "レコードが生成された場合は、いつ、誰によって追加されたか。"

#: ../../en/history_tracking.rst:13
msgid "If a record was deleted, when it was deleted and by whom."
msgstr "レコードが削除された場合は、いつ、誰によって削除されたか。"

#: ../../en/history_tracking.rst:14
msgid ""
"If a record was updated, adding a deletion record (for the old state) and a "
"creation record (for the new state)."
msgstr "レコードが更新された場合は、削除レコード (古い状態) と生成レコード "
"(新しい状態) を追加します。"

#: ../../en/history_tracking.rst:17
msgid "Using TSTZRANGE"
msgstr "TSTZRANGE を使う"

#: ../../en/history_tracking.rst:19
msgid ""
"The history table uses a PostgreSQL-specific feature--the \"`timestamp range "
"<https://www.postgresql.org/docs/current/rangetypes.html>`_\" type--to store "
"the time range that a history record was the \"live\" record. All the "
"timestamp ranges in the history table for a particular feature can be "
"expected to be non-overlapping but adjacent."
msgstr ""
"履歴テーブルは PostgreSQL 特有の機能である「`タイムスタンプ範囲 <https://www."
"postgresql.jp/document/current/html/rangetypes.html>`_」型を使います。履歴レ"
"コードが「生きている」レコードであった時刻範囲を保存します。特定の地物の履歴"
"テーブルのタイムスタンプ範囲は全てオーバラップせずに隣接していると期待できま"
"す。"

#: ../../en/history_tracking.rst:21
msgid ""
"The range for a new record will start at ``now()`` and have an open end "
"point, so that the range covers all time from the current time into the "
"future."
msgstr "新しいレコードの範囲は「now()」で始まり、閉じてない終了点を持ちます。そのため"
"、範囲は現在時刻から未来までの時刻の全てに対応します。"

#: ../../en/history_tracking.rst:34
msgid ""
"Similarly, the time range for a deleted record will be updated to include "
"the current time as the end point of the time range."
msgstr "同様に、削除レコードの時刻範囲は、時刻範囲の終点として更新時の時刻を含むよう"
"に更新されます。"

#: ../../en/history_tracking.rst:36
msgid ""
"Searching time ranges is much simpler than searching a pair of timestamps, "
"because of the way an open time range encompasses all time from the start "
"point to infinity. The \"contains\" operator ``@>`` for ranges is the one we "
"will use."
msgstr ""
"時刻範囲の検索は、時刻を二つ使った検索よりはるかに単純です。閉じていない時刻"
"範囲は、始点から無限大までの時刻の全てを包含するためです。範囲用の「含む」"
"演算子 ``@>`` は、後で使用します。"

#: ../../en/history_tracking.rst:47
msgid ""
"Ranges can be very efficiently indexed using a GIST index, just like spatial "
"data, as we will show below. This makes history queries very efficient."
msgstr ""
"下に示すように、範囲はGiSTインデックスを使って、空間データのように、非常に効"
"率的なインデックスを作ることができます。これによって履歴クエリは非常に効率的"
"になります。"

#: ../../en/history_tracking.rst:51
msgid "Building the History Table"
msgstr "履歴テーブルの構築"

#: ../../en/history_tracking.rst:53
msgid ""
"Using this information it is possible to reconstruct the state of the edit "
"table at any point in time. In this example, we will add history tracking to "
"our **nyc_streets** table."
msgstr ""
"この情報を使うと、任意の時点での編集テーブルの状態を再構築できます。この例で"
"は、履歴追跡を **nyc_streets** テーブルに追加しています。"

#: ../../en/history_tracking.rst:55
msgid ""
"First, add a new **nyc_streets_history** table. This is the table we will "
"use to store all the historical edit information. In addition to all the "
"fields from **nyc_streets**, we add five more fields."
msgstr ""
"まず **nyc_streets_history** "
"を新規追加します。これは編集履歴情報を保存するテーブルです。**nyc_streets** "
"からのフィールド全てに合わせて、5個のフィールドを追加します。"

#: ../../en/history_tracking.rst:57
msgid "**hid** the primary key for the history table"
msgstr "**hid** 履歴テーブルの主キー"

#: ../../en/history_tracking.rst:58
msgid "**created_by** the database user that caused the record to be created"
msgstr "**created_by** レコード作成を行ったデータベースユーザ"

#: ../../en/history_tracking.rst:59
msgid ""
"**deleted_by** the database user that caused the record to be marked as "
"deleted"
msgstr "**deleted_by** レコードへの削除マーク付加を行ったデータベースユーザ"

#: ../../en/history_tracking.rst:60
msgid "**valid_range** the time range within which the record was \"live\""
msgstr "**valid_range** そのレコードが「生きていた」時間範囲"

#: ../../en/history_tracking.rst:62
msgid ""
"Note that we don't actually delete any records in the history table, we just "
"mark the time they ceased to be part of the current state of the edit table."
msgstr "履歴テーブル内のレコードは、実際には一切削除しません。編集テーブルの現在の状"
"況の一部でなくなった時刻を記録するだけです。"

#: ../../en/history_tracking.rst:87
msgid ""
"Next, we import the current state of the active table, **nyc_streets** into "
"the history table, so we have a starting point to trace history from. Note "
"that we fill in the creation time and creation user, but leave the end of "
"the time range and the deleted by information NULL."
msgstr ""
"次に、使用している **nyc_streets** テーブルの現在の状況を履歴テーブルにインポ"
"ートします。これで履歴追跡のための開始点を持つことになります。生成時刻と生成"
"ユーザは埋まりますが、時刻範囲の終了時刻は放置され、NULLで削除されていること"
"に注意して下さい。"

#: ../../en/history_tracking.rst:98
msgid ""
"Now we need three triggers on the active table, for INSERT, DELETE and "
"UPDATE actions. First we create the trigger functions, then bind them to the "
"table as triggers."
msgstr ""
"使用するテーブルには、INSERT、DELETE、UPDATE の各処理のための三つのトリガが必"
"要です。最初にトリガ関数を生成し、その後にトリガとしテーブルにバインドします"
"。"

#: ../../en/history_tracking.rst:100
msgid ""
"For an insert, we just add a new record into the history table with the "
"creation time/user."
msgstr "INSERT では、新しいレコードを履歴テーブルに生成時/ユーザと一緒に追加します。"

#: ../../en/history_tracking.rst:123
msgid ""
"For a deletion, we just mark the currently active history record (the one "
"with a NULL deletion time) as deleted."
msgstr "DELETE では、現在有効な (削除時刻が NULL になっている) "
"履歴レコードに削除済みをマークするだけです。"

#: ../../en/history_tracking.rst:145
msgid ""
"For an update, we first mark the active history record as deleted, then "
"insert a new record for the updated state."
msgstr "UPDATE では、最初に有効な履歴レコードを削除済みにして、更新後に相当する新しい"
"レコードを挿入します。"

#: ../../en/history_tracking.rst:176
msgid "Editing the Table"
msgstr "テーブルの編集"

#: ../../en/history_tracking.rst:178
msgid ""
"Now that the history table is enabled, we can make edits on the main table "
"and watch the log entries appear in the history table."
msgstr "現在、履歴テーブルが有効になっています。メインテーブル上で編集して、履歴テー"
"ブルのログ登録状況を確認できます。"

#: ../../en/history_tracking.rst:180
msgid ""
"Note the power of this database-backed approach to history: **no matter what "
"tool is used to make the edits, whether the SQL command line, a web-based "
"JDBC tool, or a desktop tool like QGIS, the history is consistently tracked."
"**"
msgstr ""
"履歴へのデータベースが支援するアプローチのパワーに注意して下さい: **編集に "
"SQL コマンドライン、ウェブベースの JDBC ツール、QGIS のようなデスクトップツー"
"ルなどのツールの、どういうものを使おうとも、履歴は一貫して追跡できます。**"

#: ../../en/history_tracking.rst:183
msgid "SQL Edits"
msgstr "SQL 編集"

#: ../../en/history_tracking.rst:185
msgid ""
"Let's turn the two streets named \"Cumberland Walk\" to the more stylish "
"\"Cumberland Wynde\":"
msgstr ""
"\"Cumberland Walk\" という名前の二つのストリートを、よりスタイリッシュな "
"\"Cumberland Wynde\" に変更してみましょう:"

#: ../../en/history_tracking.rst:193
msgid ""
"Updating the two streets will cause the original streets to be marked as "
"deleted in the history table, with a deletion time of now, and two new "
"streets with the new name added, with an addition time of now. You can "
"inspect the historical records:"
msgstr ""
"二つのストリートの更新によって、履歴テーブルでは元のストリートに削除済みマー"
"ク、削除時刻が付き、二つの名前が変更された新しいストリートが追加され、現在時"
"刻が付きます。履歴レコードを調べることができます:"

#: ../../en/history_tracking.rst:202
msgid "Querying the History Table"
msgstr "履歴テーブルのクエリ"

#: ../../en/history_tracking.rst:204
msgid ""
"Now that we have a history table, what use is it? It's useful for time "
"travel! To travel to a particular time **T**, you need to construct a query "
"that includes:"
msgstr ""
"現在、履歴テーブルを持っています。どういう用途でしょうか? "
"時間旅行に使うのです! 特定の時刻 **T** "
"に行くには、次を含むクエリを構築する必要があります:"

#: ../../en/history_tracking.rst:206
msgid "All records created before T, and not yet deleted; and also"
msgstr "T の前に作られ、まだ削除されていない全てのレコードと、さらに"

#: ../../en/history_tracking.rst:207
msgid "All records created before T, but deleted **after** T."
msgstr "T の前に作られるが T の後に削除された全てのレコード。"

#: ../../en/history_tracking.rst:209
msgid ""
"We can use this logic to create a query, or a view, of the state of the data "
"in the past. Since presumably all your test edits have happened in the past "
"couple minutes, let's create a view of the history table that shows the "
"state of the table 10 minutes ago, **before you started editing** (so, the "
"original data)."
msgstr ""
"このロジックを使って、過去のデータ状況のクエリやビューを生成できます。おそら"
"く全ての試験編集は過去数分に行われているので、**編集開始前** "
"(つまりオリジナルデータ) である、10分前のテーブルの状況を示す履歴テーブルのビ"
"ューを生成してみましょう。"

#: ../../en/history_tracking.rst:221
msgid ""
"We can also create views that show just what a particular used has added, "
"for example:"
msgstr "特定の使用者が追加したものだけを表示するビューを作ることもできます。次のよう"
"にします:"

#: ../../en/history_tracking.rst:231
msgid "See Also"
msgstr "関連情報"

#: ../../en/history_tracking.rst:233
msgid "`QGIS open source GIS <http://qgis.org>`_"
msgstr "`QGIS フリーでオープンソースの地理情報システム <http://qgis.org>`_"

#: ../../en/history_tracking.rst:234
msgid ""
"`PostgreSQL Triggers <http://www.postgresql.org/docs/current/static/plpgsql-"
"trigger.html>`_"
msgstr ""
"`PostgreSQL トリガ関数 <https://www.postgresql.jp/document/current/html/"
"plpgsql-trigger.html>`_"

#: ../../en/history_tracking.rst:235
msgid ""
"`PostgreSQL Range Types <https://www.postgresql.org/docs/current/rangetypes."
"html>`_"
msgstr ""
"`PostgreSQL 範囲型 <https://www.postgresql.jp/document/current/html/"
"rangetypes.html>`_"
