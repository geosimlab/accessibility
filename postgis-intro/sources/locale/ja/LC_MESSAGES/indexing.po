# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to
# PostGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# Regina Obe <regina@arrival3d.com>, 2022.
# Teramoto Ikuhiro <yellow@affrc.go.jp>, 2023, 2024.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2024-05-30 02:45+0000\n"
"Last-Translator: Teramoto Ikuhiro <yellow@affrc.go.jp>\n"
"Language-Team: Japanese <https://weblate.osgeo.org/projects/postgis-workshop/"
"indexing/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4.3\n"
"Generated-By: Babel 2.9.1\n"

#: ../../en/indexing.rst:4
msgid "Spatial Indexing"
msgstr "空間インデックス"

#: ../../en/indexing.rst:6
msgid ""
"Recall that spatial index is one of the three key features of a spatial "
"database. Indexes make using a spatial database for large data sets "
"possible. Without indexing, any search for a feature would require a "
"\"sequential scan\" of every record in the database. Indexing speeds up "
"searching by organizing the data into a search tree which can be quickly "
"traversed to find a particular record."
msgstr ""
"空間インデックスは空間データベースの主要3機能の一つであることを思い出して下さ"
"い。インデックスによって、空間データベースで大きなデータ集合を使えるようにな"
"ります。インデックスなしでは、地物の検索に、データベースのレコードの全てを「"
"シーケンシャルスキャン」で検索する必要があります。インデックスによって、デー"
"タを検索木に整理して、特定のレコードを素早く検索できるようにできるので、検索"
"速度が向上します。"

#: ../../en/indexing.rst:8
msgid ""
"Spatial indices are one of the greatest assets of PostGIS.  In the previous "
"example building spatial joins requires comparing whole tables with each "
"other. This can get very costly: joining two tables of 10,000 records each "
"without indexes would require 100,000,000 comparisons; with indexes the cost "
"could be as low as 20,000 comparisons."
msgstr ""
"空間インデックスは、PostGIS の最大の財産の一つです。かつての例では、空間結合"
"を構築するには、テーブル全体の各レコードを互いに比較していく必要がありました"
"。これは非常にコストがかかります。10,000レコードのテーブルが二つあって、"
"インデックス無しで計算しようとすると 100,000,000 回の比較が必要となります。"
"対してインデックスでは 20,000 回まで下がる可能性があります。"

#: ../../en/indexing.rst:10
msgid ""
"Our data load file already included spatial indexes for all the tables, so "
"in order to demonstrate the efficacy of indexes we will have to first remove "
"them."
msgstr ""
"データロードファイルには、全てのテーブルに対する空間インデックスが既に含まれ"
"ているので、インデックスの効果を示すには、まずインデックスを削除する必要があ"
"ります。"

#: ../../en/indexing.rst:12
msgid ""
"Let's run a query on ``nyc_census_blocks`` **without** our spatial index."
msgstr "``nyc_census_blocks`` "
"テーブル上で空間インデックス**なしで**クエリを実行してみましょう。"

#: ../../en/indexing.rst:14
msgid "Our first step is to **remove** the index."
msgstr "最初に、インデックスを**削除します**。"

#: ../../en/indexing.rst:22
msgid ""
"The ``DROP INDEX`` statement drops an existing index from the database "
"system. For more information, see the PostgreSQL `documentation <http://www."
"postgresql.org/docs/current/interactive/sql-dropindex.html>`_."
msgstr ""
"``DROP INDEX`` 文で、既存のインデックスをデータベースシステムから削除します。"
"詳細については、PostgreSQLの `文書 <https://www.postgresql.jp/document/"
"current/html/sql-dropindex.html>`_ をご覧下さい。"

#: ../../en/indexing.rst:24
msgid ""
"Now, watch the \"Timing\" meter at the lower right-hand corner of the "
"pgAdmin query window and run the following. Our query searches through every "
"single census block in order to identify blocks that contain subway stops "
"that start with \"B\"."
msgstr ""
"pgAdmin のクエリウィンドウの右下隅にある \"Timing\" "
"メーターを見て、次を実行して下さい。クエリは、\"B\" で始まる地下鉄駅を含む街"
"区を特定するために、統計調査街区を一つ一つ探索していきます。"

#: ../../en/indexing.rst:40
msgid ""
"The ``nyc_census_blocks`` table is very small (only a few thousand records) "
"so even without an index, the query only takes **300 ms** on my test "
"computer."
msgstr ""
"``nyc_census_blocks`` テーブルは非常に小さい (数千レコードのみ) "
"ので、インデックス無しでも、クエリは、こちらのコンピュータ上では、 "
"**300ミリ秒** しかかかりませんでした。"

#: ../../en/indexing.rst:42
msgid "Now add the spatial index back in and run the query again."
msgstr "空間インデックスを追加しなおして、クエリをもう一度実行します。"

#: ../../en/indexing.rst:50
msgid ""
"The ``USING GIST`` clause tells PostgreSQL to use the generic index "
"structure (GIST) when building the index.  If you receive an error that "
"looks like ``ERROR: index row requires 11340 bytes, maximum size is 8191`` "
"when creating your index, you have likely neglected to add the ``USING "
"GIST`` clause."
msgstr ""
"\"USING GiST\" 句で、PostgreSQLに、インデックス作成時に汎用インデックス構造 ("
"Generic Index STructure) "
"を使うように指示を出しています。インデックス作成時に``ERROR: index row "
"requires 11340 bytes, maximum size is 8191`` "
"のようなエラーを受け取った場合には、\"USING GiST\" "
"句の追加を怠った可能性があります。"

#: ../../en/indexing.rst:52
msgid ""
"On my test computer the time drops to **50 ms**. The larger your table, the "
"larger the relative speed improvement of an indexed query will be."
msgstr ""
"こちらのコンピュータでは **50ミリ秒** に低下します。より大きなテーブルでは、"
"インデックス付きのクエリの相対的な速度向上が、より大きくなります。"

#: ../../en/indexing.rst:55
msgid "How Spatial Indexes Work"
msgstr "どのように空間インデックスが動作するか"

#: ../../en/indexing.rst:57
msgid ""
"Standard database indexes create a hierarchical tree based on the values of "
"the column being indexed. Spatial indexes are a little different -- they are "
"unable to index the geometric features themselves and instead index the "
"bounding boxes of the features."
msgstr ""
"標準のデータベースインデックスは、インデックス化されるカラムの値に基づいて階"
"層ツリーを生成します。空間インデックスは少し違います。ジオメトリの地物自体の"
"インデックス化することができず、代わりに地物のバウンディングボックスについて"
"インデックス化します。"

#: ../../en/indexing.rst:62
msgid ""
"In the figure above, the number of lines that intersect the yellow star is "
"**one**, the red line. But the bounding boxes of features that intersect the "
"yellow box is **two**, the red and blue ones."
msgstr ""
"上の図では、黄色の星とインタセクトするラインの数は、赤いラインの**一つ**です"
"。しかし、黄色のボックスとインタセクトする地物のバウンディングボックスは、赤"
"いラインと青いラインの**二つ**です。"

#: ../../en/indexing.rst:64
msgid ""
"The way the database efficiently answers the question \"what lines intersect "
"the yellow star\" is to first answer the question \"what boxes intersect the "
"yellow box\" using the index (which is very fast) and then do an exact "
"calculation of \"what lines intersect the yellow star\" **only for those "
"features returned by the first test**."
msgstr ""
"「どのラインが黄色い星とインタセクトするか」という質問にデータベースが効率的"
"に答える方法は、最初にインデックスを使って (非常に速いです) 「どのボックスが"
"黄色いボックスとインタセクトするのか」という質問に答え、その後に、「どのライ"
"ンが黄色い星とインタセクトするか」の確実な計算を、**最初のテストによって返さ"
"れた地物だけについて**行います。"

#: ../../en/indexing.rst:66
msgid ""
"For a large table, this \"two pass\" system of evaluating the approximate "
"index first, then carrying out an exact test can radically reduce the amount "
"of calculations necessary to answer a query."
msgstr ""
"大きなテーブルでは、近似的なインデックスの評価を行ってから、確実なテストを実"
"行する「二つの関門」システムによって、クエリの答を得るのに必要な計算量を大幅"
"に減らすことができます。"

#: ../../en/indexing.rst:68
msgid ""
"Both PostGIS and Oracle Spatial share the same \"R-Tree\" [#RTree]_ spatial "
"index structure. R-Trees break up data into rectangles, and sub-rectangles, "
"and sub-sub rectangles, etc.  It is a self-tuning index structure that "
"automatically handles variable data density, differing amounts of object "
"overlap, and object size."
msgstr ""
"PostGIS と Oracle Spatial は、どちらも「R木」[#RTree]_ 空間インデックス構造を"
"持っています。R木はデータを長方形に分割し、さらに小さな長方形に分割し、さらに"
"文化地していきます。可変データ密度、オブジェクトの異なるオーバラップ量、オブ"
"ジェクトサイズを自動的に処理する自己調整インデックス構造です。"

#: ../../en/indexing.rst:74
msgid "Spatially Indexed Functions"
msgstr "空間インデックス関数"

#: ../../en/indexing.rst:76
msgid ""
"Only a subset of functions will automatically make use of a spatial index, "
"if one is available."
msgstr "空間インデックスが有効な時に自動的に空間インデックスを使用する関数は一部だけ"
"です。"

#: ../../en/indexing.rst:78
msgid "`ST_Intersects <http://postgis.net/docs/ST_Intersects.html>`_"
msgstr "`ST_Intersects <http://postgis.net/docs/ja/ST_Intersects.html>`_"

#: ../../en/indexing.rst:79
msgid "`ST_Contains <http://postgis.net/docs/ST_Contains.html>`_"
msgstr "`ST_Contains <http://postgis.net/docs/ja/ST_Contains.html>`_"

#: ../../en/indexing.rst:80
msgid "`ST_Within <http://postgis.net/docs/ST_Within.html>`_"
msgstr "`ST_Within <http://postgis.net/docs/ja/ST_Within.html>`_"

#: ../../en/indexing.rst:81
msgid "`ST_DWithin <http://postgis.net/docs/ST_DWithin.html>`_"
msgstr "`ST_DWithin <http://postgis.net/docs/ja/ST_DWithin.html>`_"

#: ../../en/indexing.rst:82
msgid ""
"`ST_ContainsProperly <http://postgis.net/docs/ST_ContainsProperly.html>`_"
msgstr ""
"`ST_ContainsProperly <http://postgis.net/docs/ja/ST_ContainsProperly.html>`_"

#: ../../en/indexing.rst:83
msgid "`ST_CoveredBy <http://postgis.net/docs/ST_CoveredBy.html>`_"
msgstr "`ST_CoveredBy <http://postgis.net/docs/ja/ST_CoveredBy.html>`_"

#: ../../en/indexing.rst:84
msgid "`ST_Covers <http://postgis.net/docs/ST_Covers.html>`_"
msgstr "`ST_Covers <http://postgis.net/docs/ja/ST_Covers.html>`_"

#: ../../en/indexing.rst:85
msgid "`ST_Overlaps <http://postgis.net/docs/ST_Overlaps.html>`_"
msgstr "`ST_Overlaps <http://postgis.net/docs/ja/ST_Overlaps.html>`_"

#: ../../en/indexing.rst:86
msgid "`ST_Crosses <http://postgis.net/docs/ST_Crosses.html>`_"
msgstr "`ST_Crosses <http://postgis.net/docs/ja/ST_Crosses.html>`_"

#: ../../en/indexing.rst:87
msgid "`ST_DFullyWithin <http://postgis.net/docs/ST_DFullyWithin.html>`_"
msgstr "`ST_DFullyWithin <http://postgis.net/docs/ja/ST_DFullyWithin.html>`_"

#: ../../en/indexing.rst:88
msgid "`ST_3DIntersects <http://postgis.net/docs/ST_3DIntersects.html>`_"
msgstr "`ST_3DIntersects <http://postgis.net/docs/ja/ST_3DIntersects.html>`_"

#: ../../en/indexing.rst:89
msgid "`ST_3DDWithin <http://postgis.net/docs/ST_3DDWithin.html>`_"
msgstr "`ST_3DDWithin <http://postgis.net/docs/ja/ST_3DDWithin.html>`_"

#: ../../en/indexing.rst:90
msgid "`ST_3DDFullyWithin <http://postgis.net/docs/ST_3DDFullyWithin.html>`_"
msgstr ""
"`ST_3DDFullyWithin <http://postgis.net/docs/ja/ST_3DDFullyWithin.html>`_"

#: ../../en/indexing.rst:91
msgid ""
"`ST_LineCrossingDirection <http://postgis.net/docs/ST_LineCrossingDirection."
"html>`_"
msgstr ""
"`ST_LineCrossingDirection <http://postgis.net/docs/ja/"
"ST_LineCrossingDirection.html>`_"

#: ../../en/indexing.rst:92
msgid "`ST_OrderingEquals <http://postgis.net/docs/ST_OrderingEquals.html>`_"
msgstr ""
"`ST_OrderingEquals <http://postgis.net/docs/ja/ST_OrderingEquals.html>`_"

#: ../../en/indexing.rst:93
msgid "`ST_Equals <http://postgis.net/docs/ST_Equals.html>`_"
msgstr "`ST_Equals <http://postgis.net/docs/ja/ST_Equals.html>`_"

#: ../../en/indexing.rst:95
msgid ""
"The first four are the ones most commonly used in queries, and `ST_DWithin "
"<http://postgis.net/docs/ST_DWithin.html>`_ is very important for doing "
"\"within a distance\" or \"within a radius\" style queries while still "
"getting a performance boost from the index."
msgstr ""
"最初の4関数はクエリで最も一般的に使われます。`ST_DWithin <http://postgis.net/"
"docs/ja/ST_DWithin.html>`_ は、インデックスからパフォーマンスを向上させつつ「"
"距離内」「半径内」を求めるクエリにおいて非常に重要です。"

#: ../../en/indexing.rst:97
msgid ""
"In order to add index acceleration to other functions that are not in this "
"list (most commonly, `ST_Relate <http://postgis.net/docs/ST_Relate.html>`_) "
"add an index-only clause as descibed below."
msgstr ""
"このリストに無い関数 (`ST_Relate <http://postgis.net/docs/ja/ST_Relate.html>`"
"_ が最も一般的です) へのインデックスによる高速化機能を追加するには、インデッ"
"クスのみの句を追加します。下のようにします。"

#: ../../en/indexing.rst:101
msgid "Index-Only Queries"
msgstr "インデックスだけのクエリ"

#: ../../en/indexing.rst:103
msgid ""
"Most of the commonly used functions in PostGIS (:command:`ST_Contains`, :"
"command:`ST_Intersects`, :command:`ST_DWithin`, etc) include an index filter "
"automatically. But some functions (e.g., :command:`ST_Relate`) do not "
"include an index filter."
msgstr ""
"PostGIS で一般的に使用される関数の多く (:command:`ST_Contains`, "
":command:`ST_Intersects`, :command:`ST_DWithin`, etc) "
"は、インデックスフィルタを自動的に実行します。しかし、"
"インデックスフィルタを実行しない関数もあります (例 :command:`ST_Relate`)。"

#: ../../en/indexing.rst:105
msgid ""
"To do a bounding-box search using the index (and no filtering), make use of "
"the :command:`&&` operator. For geometries, the :command:`&&` operator means "
"\"bounding boxes overlap or touch\" in the same way that for numbers the :"
"command:`=` operator means \"values are the same\"."
msgstr ""
"インデックスを使った (かつフィルタリングなしの) "
"バウンディングボックス検索を実行するには、:command:`&&` 演算子を使います。"
"ジオメトリでは :command:`=` "
"演算子が「同じ値である」を意味するのと同じように、:command:`&&` 演算子は「バ"
"ウンディングボックスがオーバラップするか接触している」を意味します。"

#: ../../en/indexing.rst:107
msgid ""
"Let's compare an index-only query for the population of the 'West Village' "
"to a more exact query. Using :command:`&&` our index-only query looks like "
"the following:"
msgstr ""
"`West Village`の人口について、インデックスのみのクエリと正確なクエリとを比較"
"してみましょう。:command:`&&` "
"を使ったインデックスのみのクエリは次のように見えます:"

#: ../../en/indexing.rst:121
msgid ""
"Now let's do the same query using the more exact :command:`ST_Intersects` "
"function."
msgstr "同じクエリで、より確実な :command:`ST_Intersects` 関数を使ってみましょう。"

#: ../../en/indexing.rst:135
msgid ""
"A much lower answer! The first query summed up every block whose bounding "
"box intersects the neighborhood's bounding box; the second query only summed "
"up those blocks that intersect the neighborhood itself."
msgstr ""
"より少ない答になりました。一つ目のクエリでは、地区のバウンディングボックスが"
"隣の地区のバウンディングボックスとインタセクトする地区について合計しましたが"
"、二つ目のクエリでは、地区が隣の地区とインタセクトする地区のみについて合計し"
"ました。"

#: ../../en/indexing.rst:138
msgid "Analyzing"
msgstr "分析"

#: ../../en/indexing.rst:140
msgid ""
"The PostgreSQL query planner intelligently chooses when to use or not to use "
"indexes to evaluate a query. Counter-intuitively, it is not always faster to "
"do an index search: if the search is going to return every record in the "
"table, traversing the index tree to get each record will actually be slower "
"than just sequentially reading the whole table from the start."
msgstr ""
"PostgreSQL クエリプランナは、クエリの評価にインデックスを使うべきか使わないべ"
"きかをインテリジェントに選択します。直感に反して、インデックス検索は必ず速く"
"なるわけではありません。検索がテーブルのすべてのレコードを返そうとしたり、レ"
"コードごとの取得でインデックス木を横断するような場合には、はじめからテーブル"
"全体をシーケンシャルスキャンするよりも実際には遅くなる場合があります。"

#: ../../en/indexing.rst:142
msgid ""
"Knowing the size of the query rectangle is not enough to pin down whether a "
"query will return a large number or small number of records. Below, the red "
"square is small, but will return many more records than the blue square."
msgstr ""
"クエリ矩形のサイズを知るだけでは、クエリが多数または少数のレコードを返すかと"
"うかを知るには十分ではありません。次に示す図で、赤の四角形は小さいですが、青"
"の四角形より多くのレコードを返します。"

#: ../../en/indexing.rst:146
msgid ""
"In order to figure out what situation it is dealing with (reading a small "
"part of the table versus reading a large portion of the table), PostgreSQL "
"keeps statistics about the distribution of data in each indexed table "
"column.  By default, PostgreSQL gathers statistics on a regular basis. "
"However, if you dramatically change the contents of your table within a "
"short period of time, the statistics will not be up-to-date."
msgstr ""
"どの状況を取り扱うのか (テーブルの小さい部分を読むか、大きい部分を読むか)を算"
"定するために、PostgreSQLは、インデックスの付けられたカラムごとに、データの分"
"散に関する統計情報を保持します。デフォルトでは、PostgreSQLは定期的に統計情報"
"を収集します。しかしながら、短期間にテーブルの中身が劇的に変化する時には、統"
"計情報は更新されません。"

#: ../../en/indexing.rst:148
msgid ""
"To ensure the statistics match your table contents, it is wise the to run "
"the ``ANALYZE`` command after bulk data loads and deletes in your tables. "
"This force the statistics system to gather data for all your indexed columns."
msgstr ""
"統計情報がテーブル内容と合致するようにするために、"
"一括データ読み込みや一括削除の後に\"ANALYZE\"コマンドを実行するのが賢明です。"
"これにより、統計情報システムが全てのインデックス付きカラムのデータを収集する"
"よう強制されます。"

#: ../../en/indexing.rst:150
msgid ""
"The ``ANALYZE`` command asks PostgreSQL to traverse the table and update its "
"internal statistics used for query plan estimation (query plan analysis will "
"be discussed later)."
msgstr ""
"\"ANALYZE\"コマンドはPostgreSQLにテーブルを横断して、"
"クエリプランの推定に使われる内部の統計情報を更新するよう求めます "
"(クエリプランの解析については後で議論します)。"

#: ../../en/indexing.rst:157
msgid "Vacuuming"
msgstr "VACUUMの実行"

#: ../../en/indexing.rst:159
msgid ""
"It's worth stressing that just creating an index is not enough to allow "
"PostgreSQL to use it effectively.  VACUUMing must be performed whenever a "
"large number of UPDATEs, INSERTs or DELETEs are issued against a table.  The "
"``VACUUM`` command asks PostgreSQL to reclaim any unused space in the table "
"pages left by updates or deletes to records."
msgstr ""
"インデックスを作るだけではPostgreQLがインデックスを効果的に使えるようになるに"
"は十分ではないことは、強調すべきところです。VACUUM実行には、いつでも膨大なUPD"
"ATE、INSERT、DELETEがテーブルに対して発行する必要があります。\"VACUUM"
"\"コマンドはPostgreSQLに、テーブルページ内にあある、UPDATEやDELETEによって放"
"置されて使っていない領域を取り戻すよう求めます。"

#: ../../en/indexing.rst:161
msgid ""
"Vacuuming is so critical for the efficient running of the database that "
"PostgreSQL provides an \"autovacuum\" facility by default."
msgstr "VACUUM実行は効率的なデータベースの実行に非常に重要ですので、PostgreSQLはデフ"
"ォルトで「自動VACUUM」機能を提供しています。"

#: ../../en/indexing.rst:163
msgid ""
"Autovacuum both vacuums (recovers space) and analyzes (updates statistics) "
"on your tables at sensible intervals determined by the level of activity.  "
"While this is essential for highly transactional databases, it is not "
"advisable to wait for an autovacuum run after adding indices or bulk-loading "
"data.  Whenever a large batch update is performed, you should manually run "
"``VACUUM``."
msgstr ""
"自動VACUUMは、活動水準によって決定される適切な時間間隔で、テーブル上でVACUUM "
"(領域回復)と分析 (統計情報の更新)の両方を行います。これがトランザクションの多"
"いデータベースには不可欠ですが、インデックス追加やデータの一括読み込みの後に"
"実行される自動VACUUMを待つのはお勧めしません。大規模なバッチ更新が実行された"
"ときはいつでも、\"VACUUM\"の手動実行を行うべきです。"

#: ../../en/indexing.rst:165
msgid ""
"Vacuuming and analyzing the database can be performed separately as needed.  "
"Issuing ``VACUUM`` command will not update the database statistics; likewise "
"issuing an ``ANALYZE`` command will not recover unused table rows.  Both "
"commands can be run against the entire database, a single table, or a single "
"column."
msgstr ""
"VACUUM実行とデータベースの分析は、必要に応じて個別に実行できます。\"VACUUM"
"\"コマンドの発行では、データベースの統計情報は更新されません。同様に、"
"\"ANALYZE\"コマンドの発行では未使用の領域が回復されません。両方のコマンドはデ"
"ータベース全体、単一のテーブル、または単一のカラムに対して実行できます。"

#: ../../en/indexing.rst:172
msgid "Function List"
msgstr "関数リスト"

#: ../../en/indexing.rst:174
msgid ""
"`geometry_a && geometry_b <http://postgis.net/docs/geometry_overlaps."
"html>`_: Returns TRUE if A's bounding box overlaps B's."
msgstr ""
"`geometry_a && geometry_b <http://postgis.net/docs/ja/geometry_overlaps."
"html>`_: AのバウンディングボックスとBのバウンディングボックスがオーバラップす"
"る場合にはTRUEを返します。"

#: ../../en/indexing.rst:176
msgid ""
"`geometry_a = geometry_b <http://postgis.net/docs/ST_Geometry_EQ.html>`_: "
"Returns TRUE if A's bounding box is the same as B's."
msgstr ""
"`geometry_a = geometry_b <http://postgis.net/docs/ja/ST_Geometry_EQ.html>`_: "
"AのバウンディングボックスとBのバウンディングボックスと同じ場合にはTRUEを返し"
"ます。"

#: ../../en/indexing.rst:178
msgid ""
"`ST_Intersects(geometry_a, geometry_b) <http://postgis.net/docs/"
"ST_Intersects.html>`_: Returns TRUE if the Geometries/Geography \"spatially "
"intersect\" - (share any portion of space) and FALSE if they don't (they are "
"Disjoint)."
msgstr ""
"`ST_Intersects(geometry_a, geometry_b) <http://postgis.net/docs/ja/"
"ST_Intersects.html>`_: ジオメトリ/ジオグラフィが「空間的にインタセクトする」 "
"- (空間の任意部分を共有する)場合にはTRUEを返し、そうでない(接続されていない、"
"Disjoint)場合にはFALSEを返します。"

#: ../../en/indexing.rst:181
msgid "Footnotes"
msgstr "脚注"

#: ../../en/indexing.rst:182
msgid "http://postgis.net/docs/support/rtree.pdf"
msgstr "http://postgis.net/docs/support/rtree.pdf"
