# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to
# PostGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# Teramoto Ikuhiro <yellow@affrc.go.jp>, 2023.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2023-09-21 10:23+0000\n"
"Last-Translator: Teramoto Ikuhiro <yellow@affrc.go.jp>\n"
"Language-Team: Japanese <https://weblate.osgeo.org/projects/postgis-workshop/"
"knn/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.0\n"
"Generated-By: Babel 2.9.1\n"

#: ../../en/knn.rst:4
msgid "Nearest-Neighbour Searching"
msgstr "最近傍探索"

#: ../../en/knn.rst:7
msgid "What is a Nearest Neighbour Search?"
msgstr "最近傍探索とは?"

#: ../../en/knn.rst:9
msgid ""
"A frequently posed spatial query is: \"what is the nearest <candidate "
"feature> to <query feature>?\""
msgstr "しばしば要求される空間クエリに次の物があります:「<クエリ地物>への最短の<候補"
"地物>は何か?」"

#: ../../en/knn.rst:11
msgid ""
"Unlike a distance search, the \"nearest neighbour\" search doesn't include "
"any measurement restricting how far away candidate geometries might be, "
"features of any distance away will be accepted, as long as they are the "
"*nearest*."
msgstr ""
"距離探索と異なり、「最近傍」探索では、候補ジオメトリまでどれだけ遠そうかとい"
"う計測上の制限は一切含まれません。あらゆる距離の地物を、「最も近い」ものであ"
"る限り受け付けることになります。"

#: ../../en/knn.rst:13
msgid ""
"PostgreSQL solves the nearest neighbor problem by introducing an \"order by "
"distance\" (``<->``) operator that induces the database to use an index to "
"speed up a sorted return set. With an \"order by distance\" operator in "
"place, a nearest neighbor query can return the \"N nearest features\" just "
"by adding an ordering and limiting the result set to N entries."
msgstr ""
"PostgreSQLは、並べ替えた結果集合の速度向上のためにデータベースにインデックス"
"を使用するよう誘導する \"order by distance\" (``<->``) "
"演算子の導入によって最近傍問題を解決しました。あるべき \"order by distance\" "
"演算子との併用で、順序の設定と、N "
"個の集合の結果を得るための制限とを追加することで、最近傍クエリは「N "
"番目の最も近い地物」を返すことができます。"

#: ../../en/knn.rst:15
msgid ""
"The \"order by distance\" operator works for both geometry and geography "
"types.  The only difference between how they work between the two types is "
"the distance value returned.  For geometry ``<->`` returns the same answer "
"as `ST_Distance` which is dependent on the units of the spatial reference "
"system in use. For geography the distance value returned is the sphere "
"distance, instead of the more accurate spheroidal distance that "
"``ST_Distance(geography,geography)`` returns."
msgstr ""
"\"order by distance\" 演算は、ジオメトリ型、ジオグラフィ型の両方で動作します"
"。二つの型の動作の差は、返される距離値です。ジオメトリでは ``<->`` は "
"`ST_Distance` と同じで、使用している空間参照系の単位に依存します。ジオグラフ"
"ィでは、``ST_Distance(geography,geography)`` "
"が返す精度の高い回転楕円体面上の距離でなく、球面距離値を返します。"

#: ../../en/knn.rst:17
msgid "Here's the 3 nearest streets to 'Broad St' subway station:"
msgstr "'Broad St' 地下鉄駅に三つの最も近いストリートは次の通りです:"

#: ../../en/knn.rst:53
msgid ""
"How can we be sure we are getting an index-assisted query? It's a good idea "
"to check the ``EXPLAIN`` output for a nearest-neighbor query, because it's "
"possible to get correct answers from non-indexed SQL and the lack of an "
"index might not be obvious until the size of the tables scales up."
msgstr ""
"インデックスによるクエリをどの程度確定されられるでしょうか? 最近傍クエリの "
"\"EXPLAIN\" 出力を確認するのが良い考えです。正しい答えを非インデックス SQL か"
"ら得ることができ、テーブルのスケールアップが無い限りインデックスの欠如が明白"
"にはならないことがあるためです。"

#: ../../en/knn.rst:55
msgid ""
"This is the output from ``EXPLAIN``, note the index scan over the order by:"
msgstr "``EXPLAIN`` からの出力を示しますが、インデックススキャンは ORDER BY "
"に対して実行しています:"

#: ../../en/knn.rst:69
msgid "Nearest Neighbor Join"
msgstr "最近傍結合"

#: ../../en/knn.rst:71
msgid ""
"The index assisted order by operator has one major draw back: it only works "
"with a **single geometry literal** on one side of the operator. This is fine "
"for finding the objects nearest to one query object, but does not help for a "
"spatial join, where the goal is to find the nearest neighbor for each of a "
"full set of candidates."
msgstr ""
"インデックスによる ORDER BY 演算子は、演算子の一方が**単一ジオメトリリテラル*"
"*でないと動作しないという、大きな欠点があります。これはあるクエリオブジェクト"
"に最も近いオブジェクトを探索する場合は良いのですが、候補から一つずつオブジェ"
"クトを抜き出して最近傍を検索することを目的とする空間結合には役立ちません。"

#: ../../en/knn.rst:73
msgid ""
"Fortunately, there's a SQL language feature that allows us to run a query "
"repeatedly driven in a loop: the `LATERAL join <https://medium.com/kkempin/"
"postgresqls-lateral-join-bfd6bd0199df>`_."
msgstr ""
"幸運なことに、ループ内で繰り返し駆動されるクエリの実行が可能になる SQL "
"言語機能 `LATERAL join <https://medium.com/kkempin/postgresqls-lateral-join-"
"bfd6bd0199df>`_ があります。"

#: ../../en/knn.rst:75
msgid "Here we will find the nearest street to each subway station:"
msgstr "地下鉄駅ごとに最も近いストリートを探索します:"

#: ../../en/knn.rst:93
msgid ""
"Note the way the ``CROSS JOIN LATERAL`` acts as the inner part of a loop "
"driven by the subways table. Each record in the subways table gets fed into "
"the lateral subquery, one at a time, so you get a nearest result for each "
"subway record."
msgstr ""
"``CROSS JOIN LATERAL`` "
"が地下鉄テーブルで駆動するループ内の処理部分として動作します。"
"地下鉄テーブルの個々のレコードは LATERAL "
"サブクエリにどんどん送られるので、地下鉄レコードごとの最近傍の結果を得ます。"

#: ../../en/knn.rst:97
msgid ""
"The explain shows the loop on the subway stations, and the index-assisted "
"order by inside the loop where we want it:"
msgstr "EXPLAIN は地下鉄駅のループと、求めるループ内のインデックスによる ORDER BY "
"を表示します:"
