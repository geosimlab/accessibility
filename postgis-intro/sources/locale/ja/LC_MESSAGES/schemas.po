# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to
# PostGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# Teramoto Ikuhiro <yellow@affrc.go.jp>, 2023.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2023-10-28 03:23+0000\n"
"Last-Translator: Teramoto Ikuhiro <yellow@affrc.go.jp>\n"
"Language-Team: Japanese <https://weblate.osgeo.org/projects/postgis-workshop/"
"schemas/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.0\n"
"Generated-By: Babel 2.9.1\n"

#: ../../en/schemas.rst:4
msgid "PostgreSQL Schemas"
msgstr "PostgreSQL スキーマ"

#: ../../en/schemas.rst:6
msgid ""
"Production databases inevitably have a large number of tables and views, and "
"managing them all in one schema can become unwieldy quickly. Fortunately, "
"PostgreSQL_ includes the concept of a \"_Schema\"."
msgstr ""
"運用データベースは必然的に多数のテーブルとビューを持ち、これら全てを一つのス"
"キーマで管理すると、すぐに扱いにくくなります。幸運にも PostgreSQL_ には "
"\"_Schema\"の概念があります。"

#: ../../en/schemas.rst:8
msgid ""
"Schemas are like folders, and can hold tables, views, functions, sequences "
"and other relations.  Every database starts out with one schema, the "
"``public`` schema."
msgstr ""
"スキーマはフォルダのようなもので、テーブル、ビュー、関数、シーケンスやその他"
"のリレーションを保持できます。全てのデータベースは ``public`` "
"という一つのスキーマから始まります。"

#: ../../en/schemas.rst:12
msgid ""
"Inside that schema, the default install of PostGIS creates the "
"``geometry_columns``, ``geography_columns`` and ``spatial_ref_sys`` metadata "
"relations, as well as all the types and functions used by PostGIS. So users "
"of PostGIS always need access to the public schema."
msgstr ""
"スキーマ内では、PostGIS のデフォルトインストールによって、PostGISが使用する全"
"ての型と関数とともに``geometry_columns``, ``geography_columns``, "
"``spatial_ref_sys`` メタデータリレーションが生成されます。そのため、PostGIS "
"ユーザは常に public スキーマへのアクセスが必要となります。"

#: ../../en/schemas.rst:14
msgid ""
"In the public schema you can also see all the tables we have created so far "
"in the workshop."
msgstr "public スキーマ内では、ワークショップでこれまでに生成してきたテーブルの全てを"
"見ることができます。"

#: ../../en/schemas.rst:18
msgid "Why use Schemas?"
msgstr "なぜスキーマを使うのか?"

#: ../../en/schemas.rst:20
msgid "There are two very good reasons for using schemas:"
msgstr "スキーマを使用する二つの理由があります:"

#: ../../en/schemas.rst:22
msgid "Data that is managed in a schema is easier to apply bulk actions to."
msgstr "スキーマ内で管理されるデータは一括処理に適用しやすいです。"

#: ../../en/schemas.rst:24
msgid ""
"It's easier to back-up data that's in a separate schema: so volatile data "
"can have a different back-up schedule from non-volatile data."
msgstr "別のスキーマ内のデータのバックアップの方が簡単ですので、揮発性データと不揮発"
"データとはバックアップスケジュールが異なります。"

#: ../../en/schemas.rst:25
msgid ""
"It's easier to restore data that's in a separate schema: so application-"
"oriented schemas can be separately restored and backed up for time travel "
"and recovery."
msgstr ""
"別のスキーマへのデータの格納は簡単ですので、アプリケーション指向のスキーマは"
"、タイムトラベルとリカバリのための、個別の格納とバックアップが可能です。"

#: ../../en/schemas.rst:26
msgid ""
"It's easier to manage application differences when the application data is "
"in a schema: so a new version of software can work off a table structure in "
"a new schema, and cut-over involves a simple change to the schema name."
msgstr ""
"アプリケーションデータがスキーマ内にある時には、アプリケーションの差異の管理"
"が簡単になるので、新しいバージョンのソフトウェアは、新しいスキーマ内のテーブ"
"ル構造を処理して、カットオーバーの際はスキーマ名の単純な変更を行います。"

#: ../../en/schemas.rst:28
msgid ""
"Users can be restricted in their work to single schemas to allow isolation "
"of analytical and test tables from production tables."
msgstr "ユーザ作業を単一スキーマに制限することができ、これによって分析テーブルとテス"
"トテーブルを運用テーブルから分離できます。"

#: ../../en/schemas.rst:30
msgid ""
"So for production purposes, keeping your application data separate in "
"schemas improves management; and for user purposes, keeping your users in "
"separate schemas keeps them from treading on each other."
msgstr ""
"運用目的では、アプリケーションデータをスキーマで分離するようにすることで、管"
"理が改善します。ユーザ目的では、分離したスキーマのユーザが互いに踏みつけあう"
"ことを防ぎます。"

#: ../../en/schemas.rst:34
msgid "Creating a Data Schema"
msgstr "データスキーマの生成"

#: ../../en/schemas.rst:36
msgid ""
"Let's create a new schema and move a table into it.  First, create a new "
"schema in the database:"
msgstr "新しいスキーマを生成して、テーブルをそちらに移動させましょう。まず、データベ"
"ース内に新しいスキーマを生成します:"

#: ../../en/schemas.rst:42
msgid ""
"Next, we will move the ``nyc_census_blocks`` table to the ``census`` schema:"
msgstr "次に ``nyc_census_blocks`` テーブルを ``census`` スキーマに移動させます:"

#: ../../en/schemas.rst:48
msgid ""
"If you're using the :command:`psql` command-line program, you'll notice that "
"``nyc_census_blocks`` has disappeared from your table listing now! If you're "
"using PgAdmin, you might have to refresh your view to see the new schema and "
"the table inside it."
msgstr ""
"コマンドラインプログラム :command:`psql` "
"を使用している場合には、``nyc_census_blocks`` "
"がテーブル一覧から消えたことに気付くでしょう! pgAdmin を使用している場合には"
"、新しいスキーマとその中にあるテーブルを見るためには表示のリフレッシュが必要"
"な場合があります。"

#: ../../en/schemas.rst:50
msgid "You can access tables inside schemas in two ways:"
msgstr "スキーマ内のテーブルへのアクセスには二つの方法があります:"

#: ../../en/schemas.rst:52
msgid "by referencing them using ``schema.table`` notation"
msgstr "``schema.table`` 標記を使用した参照によるアクセス"

#: ../../en/schemas.rst:53
msgid "by adding the schema to your ``search_path``"
msgstr "スキーマの ``search_path``への追加によるアクセス"

#: ../../en/schemas.rst:55
msgid "Explicit referencing is easy, but it gets tiring to type after a while:"
msgstr "明示的な参照は簡単ですが、しばらくすると面倒くさくなります:"

#: ../../en/schemas.rst:61
msgid ""
"Manipulating the ``search_path`` is a nice way to provide access to tables "
"in multiple schemas without lots of extra typing."
msgstr "``search_path`` の操作は、多数の追加的なキー入力をせずに複数のスキーマ内にあ"
"るテーブルにアクセスするのに良い方法です。"

#: ../../en/schemas.rst:63
msgid "You can set the ``search_path`` at run time using the ``SET`` command:"
msgstr "``SET`` コマンドで実行時に ``search_path`` の設定ができます:"

#: ../../en/schemas.rst:69
msgid ""
"This ensures that all references to relations and functions are searched in "
"both the ``census`` and the ``public`` schemas. Remember that all the "
"PostGIS functions and types are in ``public`` so we don't want to drop that "
"from the search path."
msgstr ""
"これによって、全てのリレーションや関数委への参照が ``census`` と ``public`` "
"スキーマの両方で確実に検索されることになります。全ての PostGIS の関数と型が "
"``public`` "
"内にあり、検索パスから外したくないものであることを忘れないで下さい。"

#: ../../en/schemas.rst:71
msgid ""
"Setting the search path every time you connect can get tiring too, but "
"fortunately it's possible to permanently set the search path for a user:"
msgstr "毎回の検索パスの設定も、面倒くさくなりますが、幸運にも、永続的に検索パスを設"
"定することができます:"

#: ../../en/schemas.rst:77
msgid ""
"Now the postgres user will always have the ``census`` schema in their search "
"path."
msgstr "これで postgres ユーザは常に検索パスに ``census`` "
"スキーマが入っているようになります。"

#: ../../en/schemas.rst:81
msgid "Creating a User Schema"
msgstr "ユーザスキーマの生成"

#: ../../en/schemas.rst:83
msgid ""
"Users like to create tables, and PostGIS users do so particularly: analysis "
"operations with SQL demand temporary tables for visualization or interim "
"results, so spatial SQL tends to require that users have CREATE privileges "
"more than ordinary database workloads."
msgstr ""
"ユーザはテーブルの作成を好みますが、PostGIS ユーザは特に好みます。SQL "
"を使った分析演算には、可視化や中間結果のための一時テーブルが必要で、空間 SQL "
"では、通常のデータベース作業より、ユーザが CREATE "
"権限を持つことが求められる傾向にあります。"

#: ../../en/schemas.rst:85
msgid ""
"By default, every role in Oracle is given a personal schema. This is a nice "
"practice to use for PostgreSQL users too, and is easy to replicate using "
"PostgreSQL roles, schemas, and search paths."
msgstr ""
"デフォルトでは、Oracle の全てのロールに個別のスキーマが与えられています。"
"これは PostgreSQL ユーザにとっても素晴らしい手法であり、使用している "
"PostgreSQL のロール、スキーマ、検索パスの複製が簡単にできます。"

#: ../../en/schemas.rst:87
msgid ""
"Create a new user with table creation privileges (see :ref:`security` for "
"information about the ``postgis_writer`` role), then create a schema with "
"that user as the authorization:"
msgstr ""
"新規ユーザをテーブル生成権限を付けて生成し (``postgis_writer`` "
"ロールの詳細については :ref:`security` "
"をご覧下さい)、その後に、そのユーザに権限付与したスキーマを生成します:"

#: ../../en/schemas.rst:94
msgid ""
"If you log in as that user, you'll find the default ``search_path`` for "
"PostgreSQL is actually this:"
msgstr ""
"そのユーザとしてログインする場合には、PostgreSQL 用のデフォルトの "
"``search_path`` が実際に次の通りであることが分かります:"

#: ../../en/schemas.rst:106
msgid ""
"The first schema on the search path us the user's named schema! So now the "
"following conditions exist:"
msgstr "検索パスの最初のスキーマはユーザ名付きスキーマです! 次の条件が存在します:"

#: ../../en/schemas.rst:108
msgid "The user exists, with the ability to create spatial tables."
msgstr "空間テーブル生成可能なユーザが存在する。"

#: ../../en/schemas.rst:109
msgid "The user's named schema exists, and the user owns it."
msgstr "ユーザ名スキーマが存在し、それをユーザ自身が持っている。"

#: ../../en/schemas.rst:110
msgid ""
"The user's search path has the user schema first, so new tables are "
"automatically created there, and queries automatically search there first."
msgstr "ユーザの検索パスにユーザスキーマが最初に入っていて、新しいテーブルが自動的に"
"そこに生成され、クエリが自動的にそこで最初に実行される。"

#: ../../en/schemas.rst:112
msgid ""
"That's all there is to it, the user's default work area is now nicely "
"separated from any tables in other schemas."
msgstr "これが全てです。これで、ユーザのデフォルト作業領域は、他のスキーマから上手に"
"分割されました。"
