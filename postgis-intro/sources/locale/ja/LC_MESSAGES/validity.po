# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to
# PostGIS package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# Teramoto Ikuhiro <yellow@affrc.go.jp>, 2023.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2023-10-31 04:23+0000\n"
"Last-Translator: Teramoto Ikuhiro <yellow@affrc.go.jp>\n"
"Language-Team: Japanese <https://weblate.osgeo.org/projects/postgis-workshop/"
"validity/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.0\n"
"Generated-By: Babel 2.9.1\n"

#: ../../en/validity.rst:4
msgid "Validity"
msgstr "妥当性"

#: ../../en/validity.rst:6
msgid ""
"In 90% of the cases the answer to the question, \"why is my query giving me "
"a 'TopologyException' error\" is \"one or more of the inputs are invalid\".  "
"Which begs the question: what does it mean to be invalid, and why should we "
"care?"
msgstr ""
"「なぜクエリで 'TopologyException' エラーが発生するのでしょうか?」という質問"
"の90%は「一つ以上の入力が不正だったから」となります。ここから疑問が投げかけら"
"れます: 不正であるという意味は何か? またなぜ注意すべきか?"

#: ../../en/validity.rst:9
msgid "What is Validity"
msgstr "妥当性とは"

#: ../../en/validity.rst:11
msgid ""
"Validity is most important for polygons, which define bounded areas and "
"require a good deal of structure. Lines are very simple and cannot be "
"invalid, nor can points."
msgstr ""
"妥当性は、範囲の境界を定義し、大量の構造が必要となるポリゴンにとって最も重要"
"なものです。ラインは非常に単純で不正にはなりません。ポイントも不正にはなりま"
"せん。"

#: ../../en/validity.rst:13
msgid ""
"Some of the rules of polygon validity feel obvious, and others feel "
"arbitrary (and in fact, are arbitrary)."
msgstr "ポリゴンの妥当性の規則には明白に感じるものもあり、"
"恣意的に感じることがあります (実際、恣意的です)。"

#: ../../en/validity.rst:15
msgid "Polygon rings must close."
msgstr "ポリゴンのリングは閉じていなければなりません。"

#: ../../en/validity.rst:16
msgid ""
"Rings that define holes should be inside rings that define exterior "
"boundaries."
msgstr "穴を定義するリングは外側の境界を定義するリングの内側に置かれます。"

#: ../../en/validity.rst:17
msgid ""
"Rings may not self-intersect (they may neither touch nor cross themselves)."
msgstr "リングは自己交差できません (自身に接触又はクロスできません)。"

#: ../../en/validity.rst:18
msgid "Rings may not touch other rings, except at a point."
msgstr "リングは、ポイント以外では、他のリングに接触できません。"

#: ../../en/validity.rst:19
msgid "Elements of multi-polygons may not touch each other."
msgstr "マルチポリゴンの要素は相互に接触できません。"

#: ../../en/validity.rst:21
msgid ""
"The last three rules are in the arbitrary category. There are other ways to "
"define polygons that are equally self-consistent but the rules above are the "
"ones used by the :term:`OGC` :term:`SFSQL` standard that PostGIS conforms to."
msgstr ""
"最後の三つの規則は任意カテゴリに含まれます。自己一貫性があるポリゴンを定義す"
"る他の方法がありますが、上の規則は、PostGIS が準拠する :term:`OGC` "
":term:`SFSQL` 標準で使われるものです。"

#: ../../en/validity.rst:23
msgid ""
"The reason the rules are important is because algorithms for geometry "
"calculations depend on consistent structure in the inputs. It is possible to "
"build algorithms that have no structural assumptions, but those routines "
"tend to be very slow, because the first step in any structure-free routine "
"is to *analyze the inputs and build structure into them*."
msgstr ""
"規則が重要であるのは、ジオメトリ計算用のアルゴリズムが、入力の一貫した構造に"
"依存しているためです。構造についての仮定を持たないアルゴリズムの構築は可能で"
"す。しかし、あらゆる構造自由なルーティンの最初に行うことが「入力の解析と構造"
"の組み込み」になるため、これらのルーティンは非常に遅くなる傾向にあります。"

#: ../../en/validity.rst:25
msgid "Here's an example of why structure matters. This polygon is invalid:"
msgstr "構造が重要である理由の例を示します。このポリゴンは不正です:"

#: ../../en/validity.rst:31
msgid "You can see the invalidity a little more clearly in this diagram:"
msgstr "この図では、もう少しはっきりと不正性が分かります:"

#: ../../en/validity.rst:35
msgid ""
"The outer ring is actually a figure-eight, with a self-intersection in the "
"middle. Note that the graphic routines successfully render the polygon fill, "
"so that visually it is appears to be an \"area\": two one-unit squares, so a "
"total area of two units of area."
msgstr ""
"外側リングは実際に算用数字の8の字になっていて、真ん中で自己接触しています。描"
"画ルーティンはポリゴンの内部の色塗りに成功して、二つの1面積単位の正方形からな"
"り、合計2面積単位となる「領域」が見えていることに注意して下さい。"

#: ../../en/validity.rst:37
msgid "Let's see what the database thinks the area of our polygon is:"
msgstr "データベースがこのポリゴンの面積をどう考えるか見てみましょう:"

#: ../../en/validity.rst:51
msgid ""
"What's going on here? The algorithm that calculates area assumes that rings "
"do not self-intersect. A well-behaved ring will always have the area that is "
"bounded (the interior) on one side of the bounding line (it doesn't matter "
"which side, just that it is on *one* side). However, in our (poorly behaved) "
"figure-eight, the bounded area is to the right of the line for one lobe and "
"to the left for the other. This causes the areas calculated for each lobe to "
"cancel out (one comes out as 1, the other as -1) hence the \"zero area\" "
"result."
msgstr ""
"ここで何が起こっているのでしょう? "
"面積計算のアルゴリズムはリングは自己インタセクトしない前提で計算しています。"
"行儀の良いリングは常に境界線の一方側 "
"(どちらが内部でもよくて、*一方*でいいです)に (内部に) 区切られた領域を持ちま"
"す。しかしながら、行儀の悪い8の字ポリゴン内では、二つある区切られた領域の一つ"
"はラインの右側で区切られ、もう一つは左側で区切られます。これによって、"
"両方でキャンセルしあうような面積計算になり (一方が 1 で、もう一方が -1 "
"です)、故に「面積 0」の結果となります。"

#: ../../en/validity.rst:55
msgid "Detecting Validity"
msgstr "妥当性検出"

#: ../../en/validity.rst:57
msgid ""
"In the previous example we had one polygon that we **knew** was invalid. How "
"do we detect invalidity in a table with millions of geometries? With the :"
"command:`ST_IsValid(geometry)` function. Used against our figure-eight, we "
"get a quick answer:"
msgstr ""
"前の例では、不正だと**知っていた**一つのポリゴンを使いました。テーブル内の数"
"百のジオメトリについて不正を検知するにはどうすればいいでしょうか? "
":command:`ST_IsValid(geometry)` "
"関数を使います。8の字ポリゴンに対して使うと、すぐに答が得られます:"

#: ../../en/validity.rst:69
msgid ""
"Now we know that the feature is invalid, but we don't know why. We can use "
"the :command:`ST_IsValidReason(geometry)` function to find out the source of "
"the invalidity:"
msgstr ""
"この地物が不正なのは知っていますが、なぜ不正なのかは知りません。:command:`ST_"
"IsValidReason(geometry)` 関数を使うと、不正の原因を見つけることができます:"

#: ../../en/validity.rst:81
msgid ""
"Note that in addition to the reason (self-intersection) the location of the "
"invalidity (coordinate (1 1)) is also returned."
msgstr "理由 (自己交差) に加えて、不正位置 ((1 1)座標) "
"も返されることに注意して下さい。"

#: ../../en/validity.rst:83
msgid ""
"We can use the :command:`ST_IsValid(geometry)` function to test our tables "
"too:"
msgstr "テーブルのテストにも :command:`ST_IsValid(geometry)` 関数を使えます:"

#: ../../en/validity.rst:104
msgid "Repairing Invalidity"
msgstr "不正なものの修復"

#: ../../en/validity.rst:106
msgid ""
"Repairing invalidity involves stripping a polygon down to its simplest "
"structures (rings), ensuring the rings follow the rules of validity, then "
"building up new polygons that follow the rules of ring enclosure. Frequently "
"the results are intuitive, but in the case of extremely ill-behaved inputs, "
"the valid outputs may not conform to your intuition of how they should look. "
"Recent versions of PostGIS include different algorithms for geometry repair: "
"read the `manual page <http://postgis.net/docs/ST_MakeValid.html>`_ "
"carefully and choose the one you like best."
msgstr ""
"ポリゴンを単純な構造 (リング) に分解して、リングが妥当性の規則に従うことを確"
"実にして、リング同士の規則に従った新しいポリゴンを生成することで、不正を修復"
"できます。多くの場合、結果は直感的ですが、非常に行儀の悪い入力の場合には、妥"
"当な出力なのに、どのように見えるかの直感を満たさない場合があります。PostGIS "
"の最近のバージョンでは、ジオメトリの修復のための異なるアルゴリズムがあります:"
" `マニュアルページ <http://postgis.net/docs/ja/ST_MakeValid.html>`_ "
"を注意深く読んで、お好みのものを採用して下さい。"

#: ../../en/validity.rst:108
msgid ""
"For example, here's a classic invalidity -- the \"banana polygon\" -- a "
"single ring that encloses an area but bends around to touch itself, leaving "
"a \"hole\" which is not actually a hole."
msgstr ""
"たとえば、不正の古典的な例の「バナナポリゴン」があります。単一のリングで一つ"
"の領域を囲みますが、リング自身に接触するように曲がっていて、実際には穴でない"
"「穴」が残ったものです。"

#: ../../en/validity.rst:117
msgid ""
"Running `ST_MakeValid <http://postgis.net/docs/ST_MakeValid.html>`_ on the "
"polygon returns a valid :term:`OGC` polygon, consisting of an outer and "
"inner ring that touch at one point."
msgstr ""
"ポリゴンで `ST_MakeValid <http://postgis.net/docs/ST_MakeValid.html>`_ "
"を実行すると、妥当な :term:`OGC` ポリゴンであって、外側リングと内側リングとが"
"一つの点で接触するポリゴンが得られます。"

#: ../../en/validity.rst:133
msgid ""
"The \"banana polygon\" (or \"inverted shell\") is a case where the :term:"
"`OGC` topology model for valid geometry and the model used internally by "
"ESRI differ. The ESRI model considers rings that touch to be invalid, and "
"prefers the banana form for this kind of shape. The OGC model is the "
"reverse. Neither is \"correct\", they are just different ways to model the "
"same situation."
msgstr ""
"「バナナポリゴン」 (あるいは「逆さシェル」) は、妥当なジオメトリのための "
":term:`OGC` トポロジモデルと、ESRI が内部で使用するモデルが異なります。ESRI "
"モデルは、接触するリングを無効と考えられ、この種の形状にはバナナ形が好まれま"
"す。OGC もで鵜は逆です。両方とも「正しい」というわけでなく、同じ状況をモデル"
"化するための異なる方法です。"

#: ../../en/validity.rst:137
msgid "Bulk Validity Repair"
msgstr "大規模妥当性修復"

#: ../../en/validity.rst:139
msgid ""
"Here's an example of SQL to flag invalid geometries for review while adding "
"a repaired version to the table."
msgstr "修復されたものをテーブルに追加する間に再調査用としてジメトリにフラグを立てるS"
"QLの例を示します。"

#: ../../en/validity.rst:159
msgid ""
"A good tool for visually repairing invalid geometry is OpenJump (http://"
"openjump.org) which includes a validation routine under **Tools->QA-"
">Validate Selected Layers**."
msgstr ""
"不正ジオメトリの修復に関して視覚的に良いツールは OpenJump (http://openjump."
"org) です。**Tools->QA->Validate Selected Layers** "
"に評価ルーチンを持っています。"

#: ../../en/validity.rst:163
msgid "Function List"
msgstr "関数リスト"

#: ../../en/validity.rst:165
msgid ""
"`ST_IsValid(geometry A) <http://postgis.net/docs/ST_IsValid.html>`_: Returns "
"a boolean indiciting whether the geometery is valid."
msgstr ""
"`ST_IsValid(geometry A) <http://postgis.net/docs/ja/ST_IsValid.html>`_: "
"ジオメトリが妥当かどうかを示す真偽値を返します。"

#: ../../en/validity.rst:167
msgid ""
"`ST_IsValidReason(geometry A) <http://postgis.net/docs/ST_IsValidReason."
"html>`_: Returns a text string with the reason for the invalidity and a "
"coordinate of invalidity."
msgstr ""
"`ST_IsValidReason(geometry A) <http://postgis.net/docs/ja/ST_IsValidReason."
"html>`_: 不正の理由と不正箇所の座標値を示す文字列を返します。"

#: ../../en/validity.rst:169
msgid ""
"`ST_MakeValid(geometry A) <http://postgis.net/docs/ST_MakeValid.html>`_: "
"Returns a geometry re-constructed to obey the validity rules."
msgstr ""
"`ST_MakeValid(geometry A) <http://postgis.net/docs/ja/ST_MakeValid.html>`_: "
"妥当性規則に従って再構築したジオメトリを返します。"
